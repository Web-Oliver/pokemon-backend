import { defineConfig } from 'eslint/config';
import prettierConfig from 'eslint-config-prettier';
export default defineConfig([
  {
    // Ignore certain files and directories
    ignores: [
      'node_modules/**',
      'coverage/**',
      'dist/**',
      'build/**',
      '**/*.min.js',
      '.env',
      '.env.*',
      'package-lock.json',
      // Development and debug files
      'cleanupPersonalCollection.js',
      'debugImport.js',
      'importToLocalMongoDB.js',
      'setupAndImportData.js',
      'verifyDataImport.js',
      'verifyImport.js',
      'scripts/**',
    ],
  },
  {
    files: ['**/*.js'],
    languageOptions: {
      ecmaVersion: 2022,
      sourceType: 'module',
      globals: {
        // Node.js globals
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        clearImmediate: 'readonly',
        clearInterval: 'readonly',
        clearTimeout: 'readonly',
        console: 'readonly',
        exports: 'writable',
        global: 'readonly',
        module: 'readonly',
        process: 'readonly',
        require: 'readonly',
        setImmediate: 'readonly',
        setInterval: 'readonly',
        setTimeout: 'readonly',
      },
    },
    rules: {
      // Possible Problems
      'no-await-in-loop': 'warn', // Allow but warn for potential performance issues
      'no-constant-binary-expression': 'error',
      'no-duplicate-imports': 'error',
      'no-new-native-nonconstructor': 'error',
      'no-promise-executor-return': 'error',
      'no-self-compare': 'error',
      'no-template-curly-in-string': 'error',
      'no-unmodified-loop-condition': 'error',
      'no-unreachable-loop': 'error',
      'no-unused-private-class-members': 'error',
      'no-use-before-define': ['error', { functions: false, classes: true, variables: true }],
      'require-atomic-updates': 'error',

      // Suggestions
      'accessor-pairs': 'error',
      'arrow-body-style': ['error', 'as-needed'],
      'block-scoped-var': 'error',
      camelcase: ['error', { properties: 'never' }],
      curly: ['error', 'all'],
      'default-case': 'warn', // Warn instead of error for missing default cases
      'default-case-last': 'error',
      'dot-notation': 'error',
      eqeqeq: ['error', 'always'],
      'func-names': ['error', 'as-needed'],
      'func-style': 'off', // Allow both declarations and expressions
      'grouped-accessor-pairs': 'error',
      'guard-for-in': 'error',
      'logical-assignment-operators': 'error',
      'new-cap': ['error', { newIsCap: true, capIsNew: false }],
      'no-alert': 'error',
      'no-array-constructor': 'error',
      'no-bitwise': 'error',
      'no-caller': 'error',
      'no-console': 'off',
      'no-continue': 'error',
      'no-else-return': 'error',
      'no-empty-function': 'error',
      'no-eq-null': 'error',
      'no-eval': 'error',
      'no-extend-native': 'error',
      'no-extra-bind': 'error',
      'no-floating-decimal': 'error',
      'no-implicit-coercion': 'error',
      'no-implicit-globals': 'error',
      'no-implied-eval': 'error',
      'no-iterator': 'error',
      'no-labels': 'error',
      'no-lone-blocks': 'error',
      'no-lonely-if': 'error',
      'no-loop-func': 'error',
      'no-mixed-operators': 'error',
      'no-multi-assign': 'error',
      'no-nested-ternary': 'error',
      'no-new': 'error',
      'no-new-func': 'error',
      'no-new-wrappers': 'error',
      'no-object-constructor': 'error',
      'no-octal-escape': 'error',
      'no-param-reassign': 'error',
      'no-proto': 'error',
      'no-return-assign': 'error',
      'no-script-url': 'error',
      'no-sequences': 'error',
      'no-shadow': 'error',
      'no-throw-literal': 'error',
      'no-undef-init': 'error',
      'no-undefined': 'off', // Allow undefined in Node.js context
      'no-underscore-dangle': 'off', // MongoDB uses _id
      'no-unneeded-ternary': 'error',
      'no-unused-expressions': 'error',
      'no-useless-call': 'error',
      'no-useless-computed-key': 'error',
      'no-useless-concat': 'error',
      'no-useless-constructor': 'error',
      'no-useless-rename': 'error',
      'no-useless-return': 'error',
      'no-var': 'error',
      'no-void': 'error',
      'object-shorthand': 'error',
      'one-var': ['error', 'never'],
      'operator-assignment': 'error',
      'prefer-arrow-callback': 'error',
      'prefer-const': 'error',
      'prefer-destructuring': ['error', { object: true, array: false }],
      'prefer-exponentiation-operator': 'error',
      'prefer-numeric-literals': 'error',
      'prefer-object-spread': 'error',
      'prefer-promise-reject-errors': 'error',
      'prefer-regex-literals': 'error',
      'prefer-rest-params': 'error',
      'prefer-spread': 'error',
      'prefer-template': 'error',
      radix: 'error',
      'require-await': 'warn', // Warn instead of error for missing await
      'sort-vars': 'error',
      'spaced-comment': 'error',
      strict: ['error', 'global'],
      'symbol-description': 'error',
      'vars-on-top': 'error',
      yoda: 'error',

      // Layout & Formatting
      'array-bracket-newline': ['error', 'consistent'],
      'array-bracket-spacing': ['error', 'never'],
      'array-element-newline': ['error', 'consistent'],
      'arrow-parens': ['error', 'always'],
      'arrow-spacing': 'error',
      'block-spacing': 'error',
      'brace-style': ['error', '1tbs'],
      'comma-dangle': ['error', 'always-multiline'],
      'comma-spacing': 'error',
      'comma-style': 'error',
      'computed-property-spacing': 'error',
      'dot-location': ['error', 'property'],
      'eol-last': 'error',
      'func-call-spacing': 'error',
      'function-call-argument-newline': ['error', 'consistent'],
      'function-paren-newline': ['error', 'consistent'],
      'generator-star-spacing': 'error',
      'implicit-arrow-linebreak': 'off', // Allow flexible arrow function formatting
      indent: ['error', 2],
      'jsx-quotes': ['error', 'prefer-double'],
      'key-spacing': 'error',
      'keyword-spacing': 'error',
      'line-comment-position': 'off', // Allow inline comments
      'linebreak-style': ['error', 'unix'],
      'lines-around-comment': 'error',
      'lines-between-class-members': 'error',
      'max-len': ['error', { code: 120, tabWidth: 2, ignoreComments: true, ignoreUrls: true }],
      'max-statements-per-line': 'off', // Allow multiple statements for test setup
      'multiline-ternary': ['error', 'always-multiline'],
      'new-parens': 'error',
      'newline-per-chained-call': ['error', { ignoreChainWithDepth: 3 }],
      'no-extra-parens': ['error', 'all', { nestedBinaryExpressions: false }],
      'no-mixed-spaces-and-tabs': 'error',
      'no-multi-spaces': 'error',
      'no-multiple-empty-lines': ['error', { max: 2 }],
      'no-tabs': 'error',
      'no-trailing-spaces': 'error',
      'no-whitespace-before-property': 'error',
      'nonblock-statement-body-position': 'error',
      'object-curly-newline': ['error', { consistent: true }],
      'object-curly-spacing': ['error', 'always'],
      'object-property-newline': ['error', { allowAllPropertiesOnSameLine: true }],
      'operator-linebreak': ['error', 'before'],
      'padded-blocks': ['error', 'never'],
      'padding-line-between-statements': [
        'error',
        { blankLine: 'always', prev: ['const', 'let', 'var'], next: '*' },
        {
          blankLine: 'any',
          prev: ['const', 'let', 'var'],
          next: ['const', 'let', 'var'],
        },
      ],
      quotes: ['error', 'single'],
      'rest-spread-spacing': 'error',
      semi: ['error', 'always'],
      'semi-spacing': 'error',
      'semi-style': 'error',
      'space-before-blocks': 'error',
      'space-before-function-paren': ['error', { anonymous: 'always', named: 'never', asyncArrow: 'always' }],
      'space-in-parens': 'error',
      'space-infix-ops': 'error',
      'space-unary-ops': 'error',
      'switch-colon-spacing': 'error',
      'template-curly-spacing': 'error',
      'template-tag-spacing': 'error',
      'unicode-bom': 'error',
      'wrap-iife': 'error',
      'wrap-regex': 'error',
      'yield-star-spacing': 'error',
    },
  },
  // Test-specific configuration
  {
    files: ['test/**/*.js', '**/*.test.js', '**/*.spec.js'],
    languageOptions: {
      globals: {
        // Mocha globals
        describe: 'readonly',
        context: 'readonly',
        it: 'readonly',
        before: 'readonly',
        beforeEach: 'readonly',
        after: 'readonly',
        afterEach: 'readonly',
        // Chai globals
        expect: 'readonly',
        should: 'readonly',
        assert: 'readonly',
      },
    },
    rules: {
      'no-unused-expressions': 'off', // Chai assertions use unused expressions
      'prefer-arrow-callback': 'off', // Mocha works better with function expressions
      'func-names': 'off', // Allow anonymous functions in tests
      'max-len': ['error', { code: 120 }], // Allow longer lines in tests
      'require-atomic-updates': 'off', // Often false positives in test code
    },
  },
  // Disable ESLint rules that conflict with Prettier (must be last)
  prettierConfig,
]);
