import { asyncHandler } from '@/system/middleware/CentralizedErrorHandler.js';
import BaseController from '@/system/middleware/BaseController.js';
import { ControllerExportFactory } from '@/system/factories/ControllerExportFactory.js';

// Cards Controller using BaseController with plugins
class CardsController extends BaseController {
    // Get controller metrics
    getControllerMetrics = asyncHandler(async (req, res) => {
        const metrics = this.getMetrics();

        res.status(200).json({
            success: true,
            data: metrics
        });
    });

    constructor() {
        super('SearchService', {
            entityName: 'Card',
            pluralName: 'cards',
            includeMarkAsSold: false,
            enableCaching: true,
            enableMetrics: true,
            filterableFields: ['setId', 'cardName', 'cardNumber', 'variety', 'uniquePokemonId', 'uniqueSetId']
        });
    }
}

// Use ControllerExportFactory to eliminate duplication
const controllerExports = ControllerExportFactory.createPokemonControllerExports(CardsController, {
    entityName: 'Card',
    pluralName: 'cards',
    includeMetrics: true,
    customMethods: ['getBySetId']
});

// Add custom method implementation
controllerExports.getBySetId = (req, res, next) => {
    req.query.setId = req.params.setId;
    return controllerExports.getController().getAll(req, res, next);
};

// Create alias for getBySetId
controllerExports.getCardsBySetId = controllerExports.getBySetId;

// Export all methods generated by factory
export const {
    getAll,
    getById,
    create,
    update,
    delete: deleteCard,
    getControllerMetrics,
    getBySetId,
    getCardsBySetId,
    // Aliases
    getAllCards,
    getCardById,
    createCard,
    updateCard,
    getCardMetrics,
    // Controller getter
    getCardsController
} = controllerExports;

// Default export for backward compatibility
export default getAll;
